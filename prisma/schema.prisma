// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int     @id @default(autoincrement())
  email    String  @unique
  picture  String?
  name     String
  color    String
  password String?
  isGoogle Boolean @default(true)

  sentMessages Message[]      @relation("sentMessages")
  BotMessageTo Message[]      @relation("BotMessageTo")
  seenUsers    Message[]      @relation("seenUsers")
  createdBy    Conversation[] @relation("createdBy")

  deliveredTo Message[] @relation("deliveredTo")

  groupAdmins Conversation[] @relation("groupAdmins")

  conversations Conversation[] @relation("users")
}

model Conversation {
  id   Int    @id @default(autoincrement())
  name String //groupName or name of person sending a message too

  createdAt DateTime @default(now())

  isGroup          Boolean @default(false)
  groupDescription String?
  avatar           String?
  groupAdmins      User[]  @relation("groupAdmins")

  createdById Int?
  createdBy   User? @relation("createdBy", fields: [createdById], references: [id])

  users   User[]    @relation("users")
  Message Message[]
}

model Message {
  id Int @id @default(autoincrement())

  senderId Int?
  sender   User? @relation("sentMessages", fields: [senderId], references: [id])

  BotMessageToId Int?
  BotMessageTo   User? @relation("BotMessageTo", fields: [BotMessageToId], references: [id])

  messageType MessageType @default(Text)

  message   String
  createdAt DateTime @default(now())

  conversationId Int
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  seenUsers   User[] @relation("seenUsers")
  deliveredTo User[] @relation("deliveredTo")
}

enum MessageType {
  Bot
  Text
  Audio
  Image
}
